#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

typedef long long ll;
#define INF (1LL << 63) - 1

ll N, M;
ll init_min(vector<ll> &arr, vector<ll> &tree, int node, int start, int end) {
  if (start == end) return tree[node] = arr[start];
  else return tree[node] = min(init_min(arr, tree, node*2, start, (start+end)/2),
			       init_min(arr, tree, node*2 + 1, (start+end)/2, end));
}

ll init_max(vector<ll> &arr, vector<ll> &tree, int node, int start, int end) {
  if (start == end) return tree[node] = arr[start];
  else return tree[node] = max(init_max(arr, tree, node*2, start, (start+end)/2),
			       init_max(arr, tree, node*2 + 1, (start+end)/2, end));
}

ll range_min(vector<ll> &arr, vector<ll> &tree,int node, int start, int end, int left, int right) {
  if(left > end || right < start) return INF;
  if(left <= start && right >= end) return tree[node];

  return min(
	     range_min(arr, tree, node*2, start, (start+end)/2, left, right),
	     range_min(arr, tree, node*2 + 1, (start+end)/2, end, left, right));
}
ll range_max(vector<ll> &arr, vector<ll> &tree,int node, int start, int end, int left, int right) {
  if(left > end || right < start) return 0;
  if(left <= start && right >= end) return tree[node];

  return max(
	     range_max(arr, tree, node*2, start, (start+end)/2, left, right),
	     range_max(arr, tree, node*2 + 1, (start+end)/2, end, left, right));
}
int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  cin >> N >> M;

  vector<ll> arr(N, 0);
  vector<ll> tree_min(1LL << (ll)ceil(log2(N)));
  vector<ll> tree_max(1LL << (ll)ceil(log2(N)));
 
  for (int i=0; i<N; i++) {
    cin >> arr[i];
  }

  init_min(arr, tree_min, 1, 0, N-1);
  init_max(arr, tree_max, 1, 0, N-1);

  while(M--) {
    int left, right;
    cin >> left >> right;
    cout << range_min(arr, tree_min, 1, 0, N-1, left-1, right-1) << ' ' << range_max(arr, tree_max, 1, 0, N-1, left-1, right-1) << '\n';
  }
  return 0;
}
